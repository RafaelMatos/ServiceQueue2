// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MEMBER
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  role Role @default(MEMBER)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  patients_on Patient[]
  servers_on      Server[]
  tokens      Token[]

  @@map("users")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model Patient {
  id     String @id @default(uuid())
  age    Int
  gender Gender

  user        User          @relation(fields: [userId], references: [id])
  userId      String        @map("user_id")
  Appointment Appointment[]

  @@map("patients")
}

model Server {
  id     String @id @default(uuid())
  age    Int
  gender Gender

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@map("servers")
}

enum TokenType {
  PASSWORD_RECOVER
}

model Token {
  id        String    @id @default(uuid())
  type      TokenType
  createdAt DateTime  @default(now()) @map("created_at")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@map("tokens")
}

enum AccountProvider {
  GITHUB
}

enum AppointmentStatus {
  SCHEDULED
  WAITING
  CALLED
  FINISHED
  CANCELED
}

model Appointment {
  id        String            @id @default(uuid())
  status    AppointmentStatus @default(SCHEDULED)
  createdAt DateTime          @default(now()) @map("created_at")
  updatedAt DateTime          @updatedAt @map("updated_at")

  patient   Patient @relation(fields: [patientId], references: [id])
  patientId String  @map("patient_id")

  @@map("appointments")
}
